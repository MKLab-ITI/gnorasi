# Example fragments.

# This file is written in N3 / Turtle

@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .

@prefix module: <http://joseki.org/2003/06/module#> .
@prefix joseki: <http://joseki.org/2005/06/configuration#> .
@prefix ql:     <http://jena.hpl.hp.com/2003/07/query/> .
@prefix ja:     <http://jena.hpl.hp.com/2005/11/Assembler#> .

@prefix tdb:    <http://jena.hpl.hp.com/2008/tdb#> .

## --------------------------------------------------------------
## This file is written in N3 / Turtle
## It is an RDF graph - order of RDF triples does not matter
## to the machine but it does help people who need to edit this file.

## Note: adding rdfs:label to blank nodes will cause Joseki 
## to print that in log messages.


## --------------------------------------------------------------
## About this configuration

<> rdfs:label "Joseki Configuration File" .

## --------------------------------------------------------------
## About this server

[]  rdf:type joseki:Server ;
    joseki:serverDebug   "true" ;
    # Example of some initialization code.
    joseki:initialization
        [ module:implementation 
            [ module:className <java:org.joseki.util.ServiceInitSimple> ;
              rdfs:label "Example initializer" ; ]
        ] ;
    # ... which can be repeated.
    joseki:initialization
        [ module:implementation 
            [ module:className <java:org.joseki.util.ServiceInitSimple> ;
              rdfs:label "Example2" ; ]
        ] ;
    .

## --------------------------------------------------------------
## Services

## Services are the points that request are sent to.
## serviceRef that will be used to match requests to services,
## not some resource URI for the description.

## Note that the service reference and the routing of incoming
## requests by URI as defined by web.xml have to align.

# Service 1
# General purpose SPARQL processor, no dataset, expects the
# request to specify the dataset (either by parameters in the
# protocol request or in the query itself).

[]
    rdf:type            joseki:Service ;
    rdfs:label          "service point" ;
    joseki:serviceRef   "sparql" ;
    joseki:processor    joseki:ProcessorSPARQL ;
    .

#Gnorasi SPARQL service
[]
	rdf:type            joseki:Service ;
    rdfs:label          "SPARQL on the Gnorasi model" ;
    joseki:serviceRef   "gnorasi" ;   # web.xml must route this name to Joseki
    # dataset part
    joseki:dataset      <#gnorasiDataset> ;
    # Service part.
    # This processor will not allow either the protocol,
    # nor the query, to specify the datset.
    joseki:processor    joseki:ProcessorSPARQL_FixedDS ;
    .
	
#Gnorasi SPARQL Update service
<#serviceUpdate>
     rdf:type            joseki:Service ;
     rdfs:label          "SPARQL/Update on the Gnorasi model" ;
     joseki:serviceRef   "update/gnorasi" ;
     # dataset part
     joseki:dataset      <#gnorasiDataset>;
     # Service part.
     # This processor will not allow either the protocol,
     # nor the query, to specify the dataset.
     joseki:processor    joseki:ProcessorSPARQLUpdate
     .


## # Service 3 - has defintions inline
## []
##     rdf:type    joseki:Service ;
##     rdfs:label  "Inline example" ;
## 
##     # Required - serviceRef
##     joseki:serviceRef         "example" ;    # web.xml must route this name to Joseki
##     joseki:dataset
##         [ ja:defaultGraph    <#model1> ; ] ;
##     joseki:processor
##         # Does not exist - causes a config warning and this
##         # service is not available for requests
##         [ module:implementation [ module:className <java:module> ] ] ;
##     .
## 

## ---- SPARQL/Update
## A pair of services - one for SPARQL queries, one for SPARQL/Update
## Previous web.xml must also be updated to include a defintion for the
## servlet "SPARQL/Update service processor" and update requests must
## be routed to this servlet.


## SPARQL Update
## <#serviceUpdate>
##     rdf:type            joseki:Service ;
##     rdfs:label          "SPARQL/Update" ;
##     joseki:serviceRef   "update/service" ;
##     # dataset part
##     joseki:dataset      <#mem>;
##     # Service part.
##     # This processor will not allow either the protocol,
##     # nor the query, to specify the dataset.
##     joseki:processor    joseki:ProcessorSPARQLUpdate
##     .
## 
## <#serviceRead>
##     rdf:type            joseki:Service ;
##     rdfs:label          "SPARQL" ;
##     joseki:serviceRef   "sparql/read" ;
##     # dataset part
##     joseki:dataset      <#mem> ;     ## Same dataset
##     # Service part.
##     # This processor will not allow either the protocol,
##     # nor the query, to specify the dataset.
##     joseki:processor    joseki:ProcessorSPARQL_FixedDS ;
##     .

## --------------------------------------------------------------
## Datasets


## --------------------------------------------------------------
## Individual graphs  (Jena calls them Models)
## ---- A model, with RDF read from two files.
## (syntax determined by file extension - defaults to RDF/XML)

## ---- Data model

<#gnorasiDataset> rdf:type ja:RDFDataset ;
		rdfs:label "GNORASI Dataset" ;
		ja:defaultGraph [
			a ja:InfModel ;
			rdfs:label "GNORASI model" ;
			ja:content [ja:externalContent <file:Data/gnorasi/demo_ontology_v2.owl>] ; 
			ja:reasoner [  
				ja:reasonerURL <http://jena.hpl.hp.com/2003/GenericRuleReasoner> ;
				ja:rulesFrom <file:rules/GNORASI_rules.rl>;
			];
		]
.

## --------------------------------------------------------------
## Processors

joseki:ProcessorSPARQL
    rdfs:label "General SPARQL processor" ;
    rdf:type joseki:Processor ;
    module:implementation joseki:ImplSPARQL ;

    # Parameters - this processor processes FROM/FROM NAMED
    joseki:allowExplicitDataset       "true"^^xsd:boolean ;
    joseki:allowWebLoading            "true"^^xsd:boolean ;
    ## And has no locking policy (it loads data each time).
    ## The default is mutex (one request at a time)
    joseki:lockingPolicy                joseki:lockingPolicyNone ;
    .

joseki:ProcessorSPARQL_FixedDS
    rdfs:label "SPARQL processor for fixed datasets" ;
    rdf:type joseki:Processor ;
    module:implementation joseki:ImplSPARQL ;

    # This processor does not accept queries with FROM/FROM NAMED
    joseki:allowExplicitDataset       "false"^^xsd:boolean ;
    joseki:allowWebLoading            "false"^^xsd:boolean ;
    joseki:lockingPolicy              joseki:lockingPolicyMRSW ;
    .

joseki:ProcessorSPARQLUpdate
    rdfs:label "SPARQL Update processor" ;
    rdf:type joseki:Processor ;
    module:implementation joseki:ImplSPARQLUpdate ;
    joseki:lockingPolicy              joseki:lockingPolicyMRSW ;
    .

joseki:ImplSPARQL
    rdf:type   joseki:ServiceImpl ;
    module:className
        <java:org.joseki.processors.SPARQL> .

joseki:ImplSPARQLUpdate
    rdf:type   joseki:ServiceImpl ;
    module:className
        <java:org.joseki.processors.SPARQLUpdate> .

# Local Variables:        
# tab-width: 4
# indent-tabs-mode: nil
# End:
